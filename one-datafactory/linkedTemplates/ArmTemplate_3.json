{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "one-datafactory"
		},
		"Oracle1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle1'"
		},
		"SAPHANAViaODBCLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SAPHANAViaODBCLinkedService'"
		},
		"SAPHANAViaODBCLinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SAPHANAViaODBCLinkedService'"
		},
		"SAPHANAViaODBCLinkedService_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'SAPHANAViaODBCLinkedService'"
		},
		"SapHanaOne_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SapHanaOne'"
		},
		"SapHanaShell_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SapHanaShell'"
		},
		"SAPHANAViaODBCLinkedService_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "SYSTEM"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Test_Input1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Test_Input",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Fileinput": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Fileinput",
							"type": "Expression"
						},
						"folderPath": "Input",
						"fileSystem": "onefilesystemgen2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000b�h^\u0001\u0000\u0000�\u0004\u0000\u0000\u0013\u0000\b\u0002[Content_Types].xml �\u0004\u0002(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000���N�0\u0010E�H�C�-Jܲ@\b5��\u0012*Q>�ēƪc[�ii����\u0010B�\u0015j7�\u0012��{2��h�nm���ƻR\f����U^\u001b7/���%�\u0017\u0019�rZY�\u0014\u001b@1\u0019__�f�\u0000�q��R4D�AJ�\u001ah\u0015\u0016>����V\u0011�ƹ\f�Z�9����NV�\u00118ʩ�\u0010��\u0013�ji){^��-I\u0004�\"{�\u0016v^�P!XS)bR�r��K�s(�3�`c\u0002�0���\u000e���\u0006��7\u001eM4\u001a����ZƐk+�|\\|z�(���P��6\u0015h_-[�@�!���\u0000Pk��\u0016�2n�}�?\u0015�L��� ��%�\u0013\u001c��\u001bd����dN\u0018\"m",
						"type": "String"
					},
					{
						"name": "�ǞDO97*�~��ɸ8�O�c\u001c|n��\u0007�\u0004E��\u0014�\u0011���B\u0010��!$}�����;{���[����2�\u0006\u0000\u0000��\u0003\u0000PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000�U0#�\u0000\u0000\u0000L\u0002\u0000\u0000\u000b\u0000\b\u0002_rels/.rels �\u0004\u0002(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��MO�0\f��H�����ݐ\u0010BKwAH�!T~�I�\u000f���$\u001bݿ'\u001c\u0010T\u001a�\u0003G�~����<���!��4��\u0012\u0014;#�w����qu\u0007*&r�Fq���\u0011v�����GJy(v��*����K��#F��D�\u0010�.W\u001a\t\u0013�\u001c�\u0016=��Z�MY�b��\u0001�BS����7��ϛז��",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_output2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Test_output",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TwitterText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_Gen1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"fileName": "twitter_data.csv",
						"folderPath": "MachineLearning"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-5",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAPHANAViaODBCLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('SAPHANAViaODBCLinkedService_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('SAPHANAViaODBCLinkedService_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SAPHANAViaODBCLinkedService_password')]"
					},
					"credential": {
						"type": "SecureString",
						"value": "[parameters('SAPHANAViaODBCLinkedService_credential')]"
					}
				},
				"connectVia": {
					"referenceName": "IR-5",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SapHanaOne')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SapHana",
				"typeProperties": {
					"connectionString": "[parameters('SapHanaOne_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-5",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SapHanaShell')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SapHana",
				"typeProperties": {
					"connectionString": "[parameters('SapHanaShell_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-5",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ACQ_ADLS_ASQL_ONE_TIMESHEET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureDataLakeStoreReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "FileNameList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureDataLakeStoreReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SRCDemo",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@{item().FileName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TRGDemo",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{item().TableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Test_Input1",
								"type": "DatasetReference",
								"parameters": {
									"Fileinput": "ForEach.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Test_Input1",
											"type": "DatasetReference",
											"parameters": {
												"Fileinput": "@item().filename"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Test_output2",
											"type": "DatasetReference",
											"parameters": {
												"table": "@item().table"
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Test_Input1')]",
				"[concat(variables('factoryId'), '/datasets/Test_output2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ACQ_HANA_SRC_TE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "SYS",
					"table": "select \"SCHEMA_NAME\",\"TABLE_NAME\" from public.tables where \"SCHEMA_NAME\" ='ACQ_TE' and \"TABLE_TYPE\" = 'COLUMN'"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ACQ_PHANA_SRC_TE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "ACQ_TE",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ACQ_TIMEDIM_PHANA_SRC_TE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "_SYS_BI",
					"table": "M_TIME_DIMENSION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_LKP_PHANA_SRC_TE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SHELL_POC_LOYALTY_HANA_TRG_SHELL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SAPHANAViaODBCLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"SHELL_POC\".\"CT_EDAM_LOYALTY_REWARD_FACT_FF\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SAPHANAViaODBCLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SHELL_POC_POS_HANA_SRC_SHELL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaShell",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "SHELL_POC",
					"table": "CT_EDAM_RETAIL_TRANSACTION_LINE_FACT_FF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaShell')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleDemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "SYSTEM",
					"table": "TAXI_2018"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_291')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "_SYS_BI",
					"table": "M_TIME_DIMENSION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_rwb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "ONE",
					"table": "one.hr.dd::CT_EMPLOYEE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_v6d')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SapHanaOne",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SapHanaTable",
				"schema": [],
				"typeProperties": {
					"schema": "_SYS_BI",
					"table": "M_TIME_DIMENSION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SapHanaOne')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_TRM_ASQL_TE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ACQ_CODE_EXPENSES_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "CodeExpense",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_CODE_EXPENSE_SOURCES_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "CodeExpenseSources",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_PAY_TYPES_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "PayTypes",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_EXPENSE_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "ExpenseRecords",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_USER_TIME_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "UserTimeSheet",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_USER_EXPENSE_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "UserExpenseSheet",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_SHEET_NOTES_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "SheetNotes",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_TIME_REC_ASQL_SRC_TE",
								"type": "DatasetReference"
							},
							"name": "TimeRec",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ACQ_CURRENCY_ASQL_SCR",
								"type": "DatasetReference"
							},
							"name": "CurrencyCode",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ONE_CODE_EXPENSES_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "CodeExpenseTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_CODE_EXPENSE_SOURCES_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "CodeExpenseSourceTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_PAY_TYPES_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "PayTypeTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_EXPENSE_REC_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "ExpenseRecTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_USER_TIME_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "UserTimeSheetTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_USER_EXPENSE_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "UserExpenseSheetTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_SHEET_NOTES_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "SheetNotesTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_TIME_REC_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "TimeRecTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_EXPENSE_LODGE_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "ExpenseRecordLodge"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_SHEET_NOTES_APPROVED_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "ApprovedSheetTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_SHEET_NOTES_REJECTED_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "RejectedSheetTRM"
						},
						{
							"dataset": {
								"referenceName": "DS_ONE_SHEET_NOTES_SUBMIT_ASQL_TRG_TE",
								"type": "DatasetReference"
							},
							"name": "SubmitSheetTRM"
						}
					],
					"transformations": [
						{
							"name": "CodeExpenseMap"
						},
						{
							"name": "CodeExpenseSourceMap"
						},
						{
							"name": "PayTypeMap"
						},
						{
							"name": "ExpenseRecordsMap"
						},
						{
							"name": "UserTimeSheetMap"
						},
						{
							"name": "UserExpenseSheetMap"
						},
						{
							"name": "SheetNotesMap"
						},
						{
							"name": "TimeRecMap"
						},
						{
							"name": "UOMCode"
						},
						{
							"name": "JoinCurrency"
						},
						{
							"name": "SelectExpenseREC"
						},
						{
							"name": "FilterLodging"
						},
						{
							"name": "LoadDateERL"
						},
						{
							"name": "LoadDateCES"
						},
						{
							"name": "LoadDateCE"
						},
						{
							"name": "LoadDatePT"
						},
						{
							"name": "LoadDateER"
						},
						{
							"name": "LoadDateTR"
						},
						{
							"name": "LoadDateUES"
						},
						{
							"name": "LoadDateSN"
						},
						{
							"name": "LoadDateUT"
						},
						{
							"name": "ApprovedFilter"
						},
						{
							"name": "RejectedFilter"
						},
						{
							"name": "SubmitFilter"
						},
						{
							"name": "RankSubmit"
						},
						{
							"name": "FilterRankSubmit"
						},
						{
							"name": "RankRejected"
						},
						{
							"name": "FilterRankReject"
						},
						{
							"name": "RankApproved"
						},
						{
							"name": "FilterRankApproved"
						}
					],
					"script": "source(output(\n\t\tid_code as string,\n\t\tdescription as string,\n\t\tis_hidden as integer,\n\t\tautoadd as integer,\n\t\treserved1 as string,\n\t\tloggable as string,\n\t\tid_domain as string,\n\t\tpname as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tbatchSize: 2,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CodeExpense\nsource(output(\n\t\tid_code as string,\n\t\tdescription as string,\n\t\tis_hidden as integer,\n\t\tautoadd as integer,\n\t\treserved1 as string,\n\t\tloggable as string,\n\t\tid_domain as string,\n\t\tpname as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CodeExpenseSources\nsource(output(\n\t\tid_code as string,\n\t\tdescription as string,\n\t\tis_hidden as integer,\n\t\tautoadd as integer,\n\t\treserved1 as string,\n\t\tloggable as string,\n\t\tid_domain as string,\n\t\tpname as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PayTypes\nsource(output(\n\t\tid_expense_rec as string,\n\t\tid_user as string,\n\t\trecord_date as string,\n\t\tid_project as string,\n\t\tid_code_expense as string,\n\t\tamount as integer,\n\t\tcomment as string,\n\t\tcommit_state as integer,\n\t\tid_code_currency as string,\n\t\tid_code_expense_source as string,\n\t\tid_domain as string,\n\t\tread_only_comment as string,\n\t\tflags as string,\n\t\tid_picture as string,\n\t\treserved1 as string,\n\t\treserved2 as string,\n\t\tcreator as string,\n\t\tcreate_timestamp as integer,\n\t\tmodifier as string,\n\t\tmodify_timestamp as integer,\n\t\tmileage as integer,\n\t\tid_assignment as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExpenseRecords\nsource(output(\n\t\tid_sheet as string,\n\t\tid_timesheet as string,\n\t\tid_user as string,\n\t\tpname as string,\n\t\tstate as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tid_domain as string,\n\t\tid_approver as string,\n\t\tlevel as integer,\n\t\treserved1 as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> UserTimeSheet\nsource(output(\n\t\tid_sheet as string,\n\t\tid_timesheet as string,\n\t\tid_user as string,\n\t\tpname as string,\n\t\tstate as integer,\n\t\tstart_date as string,\n\t\tend_date as string,\n\t\tid_domain as string,\n\t\tid_approver as string,\n\t\tlevel as integer,\n\t\treserved1 as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> UserExpenseSheet\nsource(output(\n\t\tid_usersheetnote as string,\n\t\tid_usersheet as string,\n\t\tnote_text as string,\n\t\tnote_creator as string,\n\t\tcreate_timestamp as integer,\n\t\textra_string_1 as string,\n\t\textra_string_2 as string,\n\t\textra_string_3 as string,\n\t\tid_domain as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SheetNotes\nsource(output(\n\t\tid_time_rec as string,\n\t\tid_user as string,\n\t\trecord_date as string,\n\t\tid_code_task as string,\n\t\tid_code_pay_type as string,\n\t\tid_project as string,\n\t\ttime_amount as integer,\n\t\tcomment as string,\n\t\tcommit_state as integer,\n\t\tid_domain as string,\n\t\tid_code_bill_type as string,\n\t\tid_group as string,\n\t\tcreator as string,\n\t\tcreate_timestamp as integer,\n\t\tmodifier as string,\n\t\tmodify_timestamp as integer,\n\t\tid_assignment as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeRec\nsource(output(\n\t\tid_code as string,\n\t\tdescription as string,\n\t\tis_hidden as integer,\n\t\tautoadd as integer,\n\t\treserved1 as string,\n\t\tloggable as string,\n\t\tid_domain as string,\n\t\tpname as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CurrencyCode\nCodeExpense select(mapColumn(\n\t\tid_code,\n\t\texpenses_description = description,\n\t\tis_hidden,\n\t\tloggable,\n\t\texpenses_name = pname,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CodeExpenseMap\nCodeExpenseSources select(mapColumn(\n\t\tid_code,\n\t\texpense_source_description = description,\n\t\tis_hidden,\n\t\tloggable,\n\t\texpense_source_name = pname,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CodeExpenseSourceMap\nPayTypes select(mapColumn(\n\t\tid_code,\n\t\tpay_type_description = description,\n\t\tis_hidden,\n\t\tloggable,\n\t\tpay_type_name = pname,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PayTypeMap\nExpenseRecords select(mapColumn(\n\t\tid_expense_rec,\n\t\tid_user,\n\t\trecord_date,\n\t\tid_project,\n\t\tid_code_expense,\n\t\tamount,\n\t\tcomment,\n\t\tcommit_state,\n\t\tid_code_currency,\n\t\tid_code_expense_source,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ExpenseRecordsMap\nUserTimeSheet select(mapColumn(\n\t\tid_sheet,\n\t\tid_timesheet,\n\t\tid_user,\n\t\tpname,\n\t\tstate,\n\t\tstart_date,\n\t\tend_date,\n\t\tid_approver,\n\t\tlevel,\n\t\tcomment = reserved1,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserTimeSheetMap\nUserExpenseSheet select(mapColumn(\n\t\tid_sheet,\n\t\tid_timesheet,\n\t\tid_user,\n\t\tpname,\n\t\tstate,\n\t\tstart_date,\n\t\tend_date,\n\t\tid_approver,\n\t\tlevel,\n\t\tcomment = reserved1,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserExpenseSheetMap\nSheetNotes select(mapColumn(\n\t\tid_usersheetnote,\n\t\tid_usersheet,\n\t\tnote_text,\n\t\tnote_creator,\n\t\tcreate_date = create_timestamp,\n\t\textra_string_1,\n\t\textra_string_2,\n\t\textra_string_3,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SheetNotesMap\nTimeRec select(mapColumn(\n\t\tid_time_rec,\n\t\tid_user,\n\t\trecord_date,\n\t\tid_code_task,\n\t\tid_code_pay_type,\n\t\tid_project,\n\t\ttime_amount,\n\t\tcomment,\n\t\tcommit_state,\n\t\tid_code_bill_type,\n\t\tload_time\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> TimeRecMap\nTimeRecMap derive(UOM_Code = 'h') ~> UOMCode\nExpenseRecordsMap, CurrencyCode join(id_code_currency == id_code,\n\tjoinType:'left',\n\tbroadcast: 'none')~> JoinCurrency\nJoinCurrency select(mapColumn(\n\t\tid_expense_rec,\n\t\tid_user,\n\t\trecord_date,\n\t\tid_project,\n\t\tid_code_expense,\n\t\tamount,\n\t\tcomment,\n\t\tcommit_state,\n\t\tid_code_currency,\n\t\tid_code_expense_source,\n\t\tcurrency_key = pname\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectExpenseREC\nSelectExpenseREC filter(id_code_expense == 'Lodging/Room') ~> FilterLodging\nFilterLodging derive(Vendor_ID = '',\n\t\tload_time = currentTimestamp(),\n\t\trecord_date = toDate((concat(substring(record_date,0,4),'-',substring(record_date,5,2),'-',substring(record_date,7,2))))) ~> LoadDateERL\nCodeExpenseSourceMap derive(load_time = currentTimestamp()) ~> LoadDateCES\nCodeExpenseMap derive(load_time = currentTimestamp()) ~> LoadDateCE\nPayTypeMap derive(load_time = currentTimestamp()) ~> LoadDatePT\nSelectExpenseREC derive(load_time = currentTimestamp(),\n\t\trecord_date = toDate((concat(substring(record_date,0,4),'-',substring(record_date,5,2),'-',substring(record_date,7,2))))) ~> LoadDateER\nUOMCode derive(load_time = currentTimestamp(),\n\t\trecord_date = toDate((concat(substring(record_date,0,4),'-',substring(record_date,5,2),'-',substring(record_date,7,2))))) ~> LoadDateTR\nUserExpenseSheetMap derive(load_time = currentTimestamp(),\n\t\tstart_date = toDate((concat(substring(start_date,0,4),'-',substring(start_date,5,2),'-',substring(start_date,7,2)))),\n\t\tend_date = toDate((concat(substring(end_date,0,4),'-',substring(end_date,5,2),'-',substring(end_date,7,2))))) ~> LoadDateUES\nSheetNotesMap derive(load_time = currentTimestamp(),\n\t\tcreate_date = add(toDate('1970-01-01'),toInteger(create_date/(60*60*24)))) ~> LoadDateSN\nUserTimeSheetMap derive(load_time = currentTimestamp(),\n\t\tstart_date = toDate((concat(substring(start_date,0,4),'-',substring(start_date,5,2),'-',substring(start_date,7,2)))),\n\t\tend_date = toDate((concat(substring(end_date,0,4),'-',substring(end_date,5,2),'-',substring(end_date,7,2))))) ~> LoadDateUT\nLoadDateSN filter(note_text == 'Approved for Level 1') ~> ApprovedFilter\nLoadDateSN filter(like(note_text , 'Rejected%')) ~> RejectedFilter\nLoadDateSN filter(note_text == 'Submitted for Approval') ~> SubmitFilter\nSubmitFilter window(over(id_usersheet),\n\tasc(create_date, true),\n\tRank = rowNumber()) ~> RankSubmit\nRankSubmit filter(Rank == 1) ~> FilterRankSubmit\nRejectedFilter window(over(id_usersheet),\n\tasc(create_date, true),\n\tRank = rowNumber()) ~> RankRejected\nRankRejected filter(Rank == 1) ~> FilterRankReject\nApprovedFilter window(over(id_usersheet),\n\tasc(create_date, true),\n\trank = rowNumber()) ~> RankApproved\nRankApproved filter(rank == 1) ~> FilterRankApproved\nLoadDateCE sink(input(\n\t\tid_code as string,\n\t\texpenses_description as string,\n\t\tis_hidden as integer,\n\t\tloggable as string,\n\t\texpenses_name as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['id_code'],\n\ttruncate:true,\n\tformat: 'table',\n\tpartitionBy('hash', 1),\n\tdateFormat:'MM/dd/yyyy',\n\ttimestampFormat:'MM/dd/yyyy HH:mm:ss') ~> CodeExpenseTRM\nLoadDateCES sink(input(\n\t\tid_code as string,\n\t\texpense_source_description as string,\n\t\tis_hidden as integer,\n\t\tloggable as string,\n\t\texpense_source_name as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> CodeExpenseSourceTRM\nLoadDatePT sink(input(\n\t\tid_code as string,\n\t\tpay_type_description as string,\n\t\tis_hidden as integer,\n\t\tloggable as string,\n\t\tpay_type_name as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> PayTypeTRM\nLoadDateER sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> ExpenseRecTRM\nLoadDateUT sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> UserTimeSheetTRM\nLoadDateUES sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> UserExpenseSheetTRM\nLoadDateSN sink(input(\n\t\tid_usersheetnote as string,\n\t\tid_usersheet as string,\n\t\tnote_text as string,\n\t\tnote_creator as string,\n\t\tcreate_date as string,\n\t\textra_string_1 as string,\n\t\textra_string_2 as string,\n\t\textra_string_3 as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tid_usersheetnote,\n\t\tid_usersheet,\n\t\tnote_text,\n\t\tnote_creator,\n\t\tcreate_date,\n\t\textra_string_1,\n\t\textra_string_2,\n\t\textra_string_3,\n\t\tload_time\n\t),\n\tdateFormat:'yyyy-MM-dd') ~> SheetNotesTRM\nLoadDateTR sink(input(\n\t\tid_time_rec as string,\n\t\tid_user as string,\n\t\trecord_date as string,\n\t\tid_code_task as string,\n\t\tid_code_pay_type as string,\n\t\tid_project as string,\n\t\ttime_amount as integer,\n\t\tcomment as string,\n\t\tcommit_state as integer,\n\t\tid_domain as string,\n\t\tid_code_bill_type as string,\n\t\tid_group as string,\n\t\tcreator as string,\n\t\tcreate_timestamp as integer,\n\t\tmodifier as string,\n\t\tmodify_timestamp as integer,\n\t\tid_assignment as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> TimeRecTRM\nLoadDateERL sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> ExpenseRecordLodge\nFilterRankApproved sink(input(\n\t\tid_usersheetnote as string,\n\t\tid_usersheet as string,\n\t\tnote_text as string,\n\t\tnote_creator as string,\n\t\tcreate_date as date,\n\t\textra_string_1 as string,\n\t\textra_string_2 as string,\n\t\textra_string_3 as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table') ~> ApprovedSheetTRM\nFilterRankReject sink(input(\n\t\tid_usersheetnote as string,\n\t\tid_usersheet as string,\n\t\tnote_text as string,\n\t\tnote_creator as string,\n\t\tcreate_date as date,\n\t\textra_string_1 as string,\n\t\textra_string_2 as string,\n\t\textra_string_3 as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tid_usersheetnote,\n\t\tid_usersheet,\n\t\tnote_text,\n\t\tnote_creator,\n\t\tcreate_date,\n\t\textra_string_1,\n\t\textra_string_2,\n\t\textra_string_3,\n\t\tload_time\n\t)) ~> RejectedSheetTRM\nFilterRankSubmit sink(input(\n\t\tid_usersheetnote as string,\n\t\tid_usersheet as string,\n\t\tnote_text as string,\n\t\tnote_creator as string,\n\t\tcreate_date as date,\n\t\textra_string_1 as string,\n\t\textra_string_2 as string,\n\t\textra_string_3 as string,\n\t\tload_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tid_usersheetnote,\n\t\tid_usersheet,\n\t\tnote_text,\n\t\tnote_creator,\n\t\tcreate_date,\n\t\textra_string_1,\n\t\textra_string_2,\n\t\textra_string_3,\n\t\tload_time\n\t)) ~> SubmitSheetTRM"
				}
			},
			"dependsOn": []
		}
	]
}